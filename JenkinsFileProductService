pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    triggers {
        githubPush()
    }

    options {
        disableConcurrentBuilds()
        timeout(time: 45, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '15'))
    }

    // üîß PAR√ÅMETROS CONFIGURABLES
    parameters {
        string(
            name: 'SERVICE_NAME',
            defaultValue: 'product-service',
            description: 'Nombre del microservicio'
        )
        string(
            name: 'JAR_NAME',
            defaultValue: 'product-service-0.0.1-SNAPSHOT.jar',
            description: 'Nombre del archivo JAR'
        )
        choice(
            name: 'TARGET_ENVIRONMENT',
            choices: ['AUTO', 'dev', 'qa', 'prod', 'none'],
            description: 'Entorno de despliegue (AUTO=Seg√∫n rama, none=Sin despliegue)'
        )
        choice(
            name: 'JAVA_VERSION',
            choices: ['21', '17', '11'],
            description: 'Versi√≥n de Java a usar (el c√≥digo requiere Java 21)'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: true,
            description: 'Omitir ejecuci√≥n de tests'
        )
    }

    environment {
        // Servidores por entorno
        EC2_USER = 'ubuntu'
        EC2_IP_DEV = '23.22.115.242'
        EC2_IP_QA = '3.220.122.151'
        EC2_IP_PROD = '34.224.192.38'

        // Configuraci√≥n de Java
        JDK_DIR = "${WORKSPACE}/jdk${params.JAVA_VERSION}"
        JAVA_HOME = "${JDK_DIR}"
        PATH = "${JDK_DIR}/bin:${PATH}"

        // Credenciales
        SSH_KEY = credentials('ssh-key-ec2')

        // Variables para el servicio
        SERVICE_NAME = "${params.SERVICE_NAME}"
        JAR_NAME = "${params.JAR_NAME}"
        SERVICE_PATH = "/home/ubuntu/${params.SERVICE_NAME}"
    }

    stages {
        stage('üîß Detectar Entorno') {
            steps {
                script {
                    // Obtener informaci√≥n de la rama
                    env.GIT_BRANCH_NAME = sh(script: 'git rev-parse --abbrev-ref HEAD 2>/dev/null || echo unknown', returnStdout: true).trim()

                    // Mostrar informaci√≥n de diagn√≥stico
                    echo "üîç [DEBUG] Git branch: ${env.GIT_BRANCH_NAME}"
                    echo "üîç [DEBUG] Jenkins GIT_BRANCH: ${env.GIT_BRANCH ?: 'no definido'}"
                    echo "üîç [DEBUG] Jenkins BRANCH_NAME: ${env.BRANCH_NAME ?: 'no definido'}"

                    // Determinar entorno basado en par√°metro o rama
                    if (params.TARGET_ENVIRONMENT == 'AUTO') {
                        if (env.GIT_BRANCH_NAME == 'main' || env.GIT_BRANCH_NAME.startsWith('main/') ||
                            env.BRANCH_NAME == 'main' || (env.GIT_BRANCH && env.GIT_BRANCH.contains('main'))) {
                            env.DEPLOY_ENV = 'prod'
                            env.NEED_APPROVAL = 'true'
                        } else if (env.GIT_BRANCH_NAME == 'qa' || env.GIT_BRANCH_NAME.startsWith('qa/') ||
                                  env.BRANCH_NAME == 'qa' || (env.GIT_BRANCH && env.GIT_BRANCH.contains('qa'))) {
                            env.DEPLOY_ENV = 'qa'
                            env.NEED_APPROVAL = 'false'
                        } else if (env.GIT_BRANCH_NAME == 'dev' || env.GIT_BRANCH_NAME.startsWith('dev/') ||
                                  env.BRANCH_NAME == 'dev' || (env.GIT_BRANCH && env.GIT_BRANCH.contains('dev')) ||
                                  env.GIT_BRANCH_NAME == 'HEAD') {
                            env.DEPLOY_ENV = 'dev'
                            env.NEED_APPROVAL = 'false'
                        } else {
                            env.DEPLOY_ENV = 'none'
                            env.NEED_APPROVAL = 'false'
                        }
                    } else if (params.TARGET_ENVIRONMENT == 'none') {
                        env.DEPLOY_ENV = 'none'
                        env.NEED_APPROVAL = 'false'
                    } else {
                        env.DEPLOY_ENV = params.TARGET_ENVIRONMENT
                        env.NEED_APPROVAL = params.TARGET_ENVIRONMENT == 'prod' ? 'true' : 'false'
                    }

                    // Verificar si no es Java 21
                    if (params.JAVA_VERSION != "21") {
                        echo """
‚ö†Ô∏è [ADVERTENCIA] Este proyecto requiere Java 21 para compilar correctamente.
   Est√°s usando Java ${params.JAVA_VERSION} lo que puede causar errores.
   Se recomienda cambiar el par√°metro JAVA_VERSION a 21.
"""
                    }

                    // Mostrar configuraci√≥n final
                    echo """
üîß [PRODUCT-SERVICE] CONFIGURACI√ìN:
   ‚Ä¢ Servicio: ${env.SERVICE_NAME}
   ‚Ä¢ JAR: ${env.JAR_NAME}
   ‚Ä¢ Rama detectada: ${env.GIT_BRANCH_NAME}
   ‚Ä¢ Entorno de despliegue: ${env.DEPLOY_ENV}
   ‚Ä¢ Requiere aprobaci√≥n: ${env.NEED_APPROVAL}
   ‚Ä¢ Java: ${params.JAVA_VERSION}
   ‚Ä¢ Omitir tests: ${params.SKIP_TESTS}
"""
                }
            }
        }

        stage('üîß Setup JDK') {
            steps {
                script {
                    def javaVersion = params.JAVA_VERSION
                    def downloadUrl = ""

                    switch(javaVersion) {
                        case '21':
                            downloadUrl = "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jdk_x64_linux_hotspot_21.0.2_13.tar.gz"
                            break
                        case '17':
                            downloadUrl = "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.9%2B9/OpenJDK17U-jdk_x64_linux_hotspot_17.0.9_9.tar.gz"
                            break
                        case '11':
                            downloadUrl = "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21%2B9/OpenJDK11U-jdk_x64_linux_hotspot_11.0.21_9.tar.gz"
                            break
                        default:
                            downloadUrl = "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jdk_x64_linux_hotspot_21.0.2_13.tar.gz"
                    }

                    echo "üîß [PRODUCT-SERVICE] Configurando JDK ${javaVersion}..."
                    sh """
                        mkdir -p \${JDK_DIR}

                        if [ ! -f \${JDK_DIR}/bin/java ]; then
                            echo "üì• [PRODUCT-SERVICE] Descargando JDK ${javaVersion}..."
                            wget -q "${downloadUrl}" -O jdk.tar.gz
                            tar -xzf jdk.tar.gz -C \${JDK_DIR} --strip-components=1
                            rm jdk.tar.gz
                            echo "‚úÖ [PRODUCT-SERVICE] JDK ${javaVersion} instalado"
                        else
                            echo "‚úÖ [PRODUCT-SERVICE] JDK ${javaVersion} ya existe"
                        fi

                        echo "‚òï [PRODUCT-SERVICE] Java version:"
                        \${JDK_DIR}/bin/java -version
                    """
                }
            }
        }

        stage('üî® Build Product Service') {
            steps {
                sh """
                    export JAVA_HOME=\${JDK_DIR}
                    export PATH=\${JAVA_HOME}/bin:\$PATH

                    echo "üî® [PRODUCT-SERVICE] Compilando aplicaci√≥n..."

                    # Verificar versi√≥n de Java
                    echo "‚òï Java version utilizada para compilar:"
                    java -version
                    echo "JAVA_HOME=\$JAVA_HOME"

                    # Dar permisos de ejecuci√≥n a mvnw
                    chmod +x ./mvnw

                    # Configurar flags de Maven
                    MAVEN_FLAGS=""
                    if [ "${params.SKIP_TESTS}" = "true" ]; then
                        MAVEN_FLAGS="-DskipTests -Dmaven.test.skip=true"
                        echo "‚è© Tests deshabilitados"
                    fi

                    # Verificar pom.xml para Java 21
                    echo "üîç Verificando versi√≥n de Java en pom.xml..."
                    grep -n "<java.version>" pom.xml || echo "No se encontr√≥ java.version"

                    # IMPORTANTE: Configurar opciones para Java 21 preview features
                    if [ "${params.JAVA_VERSION}" == "21" ]; then
                        MAVEN_FLAGS="\$MAVEN_FLAGS -Dmaven.compiler.release=21 -Dmaven.compiler.source=21 -Dmaven.compiler.target=21"
                        MAVEN_FLAGS="\$MAVEN_FLAGS -Dmaven.compiler.args=--enable-preview"
                        echo "üîß Configurando para caracter√≠sticas de preview de Java 21"
                    fi

                    # Compilar con la versi√≥n de Java especificada en el pom.xml
                    echo "üìù Ejecutando: ./mvnw -B clean package \$MAVEN_FLAGS"
                    ./mvnw -B clean package \$MAVEN_FLAGS

                    # Si el comando anterior falla, intentamos con una versi√≥n que omite el javadoc
                    if [ \$? -ne 0 ]; then
                        echo "‚ö†Ô∏è Primer intento de compilaci√≥n fall√≥, intentando con opciones alternativas..."
                        MAVEN_FLAGS="\$MAVEN_FLAGS -Dmaven.javadoc.skip=true"
                        echo "üìù Ejecutando: ./mvnw -B clean package \$MAVEN_FLAGS"
                        ./mvnw -B clean package \$MAVEN_FLAGS
                    fi

                    # Verificar JAR
                    if [ -f target/${env.JAR_NAME} ]; then
                        echo "‚úÖ [PRODUCT-SERVICE] JAR creado exitosamente"
                        ls -lh target/${env.JAR_NAME}
                    else
                        echo "‚ùå [PRODUCT-SERVICE] Error: JAR no encontrado en la ruta esperada"
                        echo "üîç Buscando JAR..."
                        find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar"
                        exit 1
                    fi
                """
            }
        }

        stage('‚ö†Ô∏è Production Approval') {
            when {
                expression { return env.NEED_APPROVAL == 'true' }
            }
            steps {
                script {
                    echo """
üö® [PRODUCT-SERVICE] APROBACI√ìN REQUERIDA PARA PRODUCCI√ìN

üìã Informaci√≥n del Deploy:
   ‚Ä¢ Servicio: ${env.SERVICE_NAME}
   ‚Ä¢ Entorno: PRODUCCI√ìN
   ‚Ä¢ Rama: ${env.GIT_BRANCH_NAME}
   ‚Ä¢ Java: ${params.JAVA_VERSION}
"""

                    timeout(time: 15, unit: 'MINUTES') {
                        def approval = input(
                            message: "üö® ¬øAprobar deploy de ${env.SERVICE_NAME} a PRODUCCI√ìN?",
                            ok: '‚úÖ Aprobar Deploy',
                            parameters: [
                                choice(
                                    name: 'ACTION',
                                    choices: ['Aprobar', 'Rechazar'],
                                    description: 'Selecciona la acci√≥n'
                                )
                            ]
                        )

                        if (approval != 'Aprobar') {
                            error("‚ùå [PRODUCT-SERVICE] Deploy a producci√≥n rechazado")
                        }

                        echo "‚úÖ [PRODUCT-SERVICE] Deploy a producci√≥n APROBADO"
                    }
                }
            }
        }

        stage('üöÄ Deploy Product Service') {
            when {
                expression { return env.DEPLOY_ENV != 'none' }
            }
            steps {
                script {
                    def EC2_IP = ''

                    // Determinar IP seg√∫n entorno
                    if (env.DEPLOY_ENV == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (env.DEPLOY_ENV == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo "üöÄ [PRODUCT-SERVICE] Desplegando en ${env.DEPLOY_ENV.toUpperCase()} (${EC2_IP})"

                    // 1. Preparar servidor
                    sh """
                    echo "üîß [PRODUCT-SERVICE] Preparando servidor..."
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no -o ConnectTimeout=30 ${EC2_USER}@${EC2_IP} '
                        # Crear directorios
                        sudo mkdir -p ${env.SERVICE_PATH}
                        sudo chown -R ubuntu:ubuntu ${env.SERVICE_PATH}

                        # Instalar dependencias b√°sicas
                        which curl > /dev/null || sudo apt-get update -qq && sudo apt-get install -y curl
                        which netstat > /dev/null || sudo apt-get install -y net-tools

                        # Instalar Java si no existe
                        if ! which java > /dev/null || ! java -version 2>&1 | grep -q "version \\"21"; then
                            echo "‚òï [PRODUCT-SERVICE] Instalando Java 21..."
                            # Java 21 puede no estar disponible en apt, usar binarios
                            curl -sL https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jre_x64_linux_hotspot_21.0.2_13.tar.gz -o /tmp/jdk21.tar.gz
                            sudo mkdir -p /opt/java/jdk21
                            sudo tar -xzf /tmp/jdk21.tar.gz -C /opt/java/jdk21 --strip-components=1
                            sudo update-alternatives --install /usr/bin/java java /opt/java/jdk21/bin/java 2100
                            rm /tmp/jdk21.tar.gz
                        fi

                        # Verificar versi√≥n de Java instalada
                        java -version

                        echo "‚úÖ [PRODUCT-SERVICE] Servidor preparado"
                    '
                    """

                    // 2. Detener servicio existente
                    sh """
                    echo "üõë [PRODUCT-SERVICE] Deteniendo servicio existente..."
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        if sudo systemctl is-active --quiet ${env.SERVICE_NAME}.service 2>/dev/null; then
                            echo "üõë Deteniendo servicio ${env.SERVICE_NAME}..."
                            sudo systemctl stop ${env.SERVICE_NAME}.service
                            sleep 5
                        else
                            echo "‚ÑπÔ∏è Servicio ${env.SERVICE_NAME} no est√° corriendo"
                        fi
                    ' || echo "‚ö†Ô∏è [PRODUCT-SERVICE] No hay servicio previo"
                    """

                    // 3. Copiar JAR
                    sh """
                    echo "üì¶ [PRODUCT-SERVICE] Copiando JAR..."
                    scp -i \$SSH_KEY -o StrictHostKeyChecking=no target/${env.JAR_NAME} ${EC2_USER}@${EC2_IP}:${env.SERVICE_PATH}/app.jar
                    echo "‚úÖ [PRODUCT-SERVICE] JAR copiado como app.jar"
                    """

                    // 4. Crear servicio systemd
                    def systemdService = """[Unit]
Description=Spring Boot Product Service
After=network.target
Wants=network-online.target
After=network-online.target

[Service]
Type=simple
User=ubuntu
Group=ubuntu
WorkingDirectory=${env.SERVICE_PATH}
ExecStart=/usr/bin/java --enable-preview -jar ${env.SERVICE_PATH}/app.jar \\
    --spring.profiles.active=${env.DEPLOY_ENV} \\
    --logging.level.root=INFO \\
    --logging.file.name=${env.SERVICE_PATH}/${env.SERVICE_NAME}.log

# Configuraci√≥n de reinicio
Restart=on-failure
RestartSec=10
SuccessExitStatus=143

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=${env.SERVICE_NAME}

# Seguridad
NoNewPrivileges=true
PrivateTmp=true

# Variables de entorno
Environment=SPRING_PROFILES_ACTIVE=${env.DEPLOY_ENV}

[Install]
WantedBy=multi-user.target"""

                    // 5. Configurar e iniciar servicio
                    sh """
                    echo "‚öôÔ∏è [PRODUCT-SERVICE] Configurando servicio systemd..."

                    # Crear archivo de servicio
                    echo '${systemdService}' | ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'sudo tee /etc/systemd/system/${env.SERVICE_NAME}.service > /dev/null'

                    # Configurar e iniciar servicio
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        # Recargar systemd
                        sudo systemctl daemon-reload

                        # Habilitar auto-inicio
                        sudo systemctl enable ${env.SERVICE_NAME}.service

                        # Iniciar servicio
                        sudo systemctl start ${env.SERVICE_NAME}.service

                        # Verificar inicio
                        sleep 15
                        if sudo systemctl is-active --quiet ${env.SERVICE_NAME}.service; then
                            echo "‚úÖ [PRODUCT-SERVICE] Servicio iniciado correctamente"
                            sudo systemctl status ${env.SERVICE_NAME}.service --no-pager -l
                        else
                            echo "‚ùå [PRODUCT-SERVICE] Error al iniciar servicio"
                            sudo systemctl status ${env.SERVICE_NAME}.service --no-pager -l
                            sudo journalctl -u ${env.SERVICE_NAME}.service --since \"5 minutes ago\" --no-pager
                            exit 1
                        fi
                    '
                    """

                    echo "‚úÖ [PRODUCT-SERVICE] Deploy completado en ${env.DEPLOY_ENV.toUpperCase()}!"
                }
            }
        }

        stage('üîç Health Check') {
            when {
                expression { return env.DEPLOY_ENV != 'none' }
            }
            steps {
                script {
                    def EC2_IP = ''

                    if (env.DEPLOY_ENV == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (env.DEPLOY_ENV == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo "üîç [PRODUCT-SERVICE] Verificando deploy..."

                    // Esperar inicio completo
                    sh "sleep 30"

                    // Verificaciones
                    sh """
                    ssh -i \$SSH_KEY -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        echo "üìä [PRODUCT-SERVICE] Estado del servicio:"
                        sudo systemctl status ${env.SERVICE_NAME}.service --no-pager

                        echo "üîå [PRODUCT-SERVICE] Detectando puerto del servicio..."
                        # Detectar el puerto
                        SERVICE_PORT=\$(sudo journalctl -u ${env.SERVICE_NAME}.service --since \"10 minutes ago\" --no-pager | grep -o "Tomcat started on port(s): [0-9]*" | grep -o "[0-9]*" | tail -1)

                        if [ -z "\$SERVICE_PORT" ]; then
                            # Fallback: buscar puerto del proceso Java
                            SERVICE_PID=\$(sudo systemctl show --property MainPID --value ${env.SERVICE_NAME}.service)
                            if [ "\$SERVICE_PID" != "0" ] && [ -n "\$SERVICE_PID" ]; then
                                SERVICE_PORT=\$(sudo netstat -tlnp 2>/dev/null | grep "\$SERVICE_PID/java" | awk "{print \$4}" | cut -d: -f2 | head -1)
                            fi
                        fi

                        if [ -n "\$SERVICE_PORT" ]; then
                            echo "‚úÖ Puerto detectado: \$SERVICE_PORT"

                            # Verificar health endpoint
                            echo "üè• Verificando health endpoint..."
                            curl -s http://localhost:\$SERVICE_PORT/actuator/health

                            # Verificar endpoints espec√≠ficos
                            echo -e "\nüõçÔ∏è Verificando endpoints de productos..."
                            curl -s -o /dev/null -w "Products endpoint HTTP status: %{http_code}\n" http://localhost:\$SERVICE_PORT/products

                            # Guardar puerto en archivo para futuras referencias
                            echo "\$SERVICE_PORT" > ${env.SERVICE_PATH}/service_port.txt
                            echo "‚úÖ Puerto guardado en ${env.SERVICE_PATH}/service_port.txt"
                        else
                            echo "‚ö†Ô∏è No se pudo detectar el puerto del servicio"
                            echo "üîç Puertos activos:"
                            sudo netstat -tuln | grep LISTEN
                        fi

                        echo "üìÑ [PRODUCT-SERVICE] √öltimos logs del servicio:"
                        sudo journalctl -u ${env.SERVICE_NAME}.service --since \"5 minutes ago\" --no-pager | tail -20
                    '
                    """
                }
            }
        }
    }

    post {
        success {
            script {
                if (env.DEPLOY_ENV != 'none') {
                    def EC2_IP = ''

                    if (env.DEPLOY_ENV == 'prod') {
                        EC2_IP = env.EC2_IP_PROD
                    } else if (env.DEPLOY_ENV == 'qa') {
                        EC2_IP = env.EC2_IP_QA
                    } else {
                        EC2_IP = env.EC2_IP_DEV
                    }

                    echo """
üéâ [PRODUCT-SERVICE] ¬°DEPLOY EXITOSO EN ${env.DEPLOY_ENV.toUpperCase()}!

üìã Informaci√≥n del servicio:
   ‚Ä¢ Nombre: ${env.SERVICE_NAME}
   ‚Ä¢ Servidor: ${EC2_IP}
   ‚Ä¢ Systemd Service: ${env.SERVICE_NAME}.service
   ‚Ä¢ Java Version: 21 (requerida por caracter√≠sticas de preview)
   ‚Ä¢ Entorno: ${env.DEPLOY_ENV}

üåê API Endpoints:
   ‚Ä¢ Base URL: http://${EC2_IP}:[PUERTO]
   ‚Ä¢ Productos: http://${EC2_IP}:[PUERTO]/products
   ‚Ä¢ Categor√≠as: http://${EC2_IP}:[PUERTO]/categories
   ‚Ä¢ Swagger: http://${EC2_IP}:[PUERTO]/swagger-ui/index.html
   ‚Ä¢ Health: http://${EC2_IP}:[PUERTO]/actuator/health

üõ†Ô∏è Comandos de gesti√≥n:
   ‚Ä¢ Estado: sudo systemctl status ${env.SERVICE_NAME}.service
   ‚Ä¢ Logs: sudo journalctl -u ${env.SERVICE_NAME}.service -f
   ‚Ä¢ Restart: sudo systemctl restart ${env.SERVICE_NAME}.service
   ‚Ä¢ Stop: sudo systemctl stop ${env.SERVICE_NAME}.service

‚úÖ Auto-inicio habilitado
"""
                } else {
                    echo "‚úÖ [PRODUCT-SERVICE] Compilaci√≥n exitosa - Sin despliegue"
                }
            }
        }

        failure {
            echo """
‚ùå [PRODUCT-SERVICE] PIPELINE FALLIDO

üîç Informaci√≥n:
   ‚Ä¢ Servicio: ${env.SERVICE_NAME}
   ‚Ä¢ Rama: ${env.GIT_BRANCH_NAME ?: 'desconocida'}
   ‚Ä¢ Entorno: ${env.DEPLOY_ENV ?: 'ninguno'}

üõ†Ô∏è Revisar logs para m√°s detalles
"""
        }

        cleanup {
            sh '''
                rm -rf jdk*.tar.gz jdk.tar.gz || true
                echo "‚úÖ Limpieza completada"
            '''
        }
    }
}